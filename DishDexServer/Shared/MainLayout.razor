@inherits LayoutComponentBase
@using System.Security.Claims
@using System.Text.Json
@using System.Text
@using OpskrifterDeler.Models
@inject AuthenticationStateProvider authenticationStateProvide
@inject HttpClient client

<MudThemeProvider IsDarkMode/> <!-- Hardcoded Darkmode, thank me later -->
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => NavDrawerToggle())" />
        <MudText> @identity</MudText>
        <MudSpacer />
        <LoginDisplay/>
    </MudAppBar>
     <MudDrawer @bind-Open="_navdrawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">DishDexBlazor</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    
    <CascadingValue Value="@identity">
            <MudMainContent>
                <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="my-16 pt-16">
                    @Body
            </MudContainer>
        </MudMainContent>
    </CascadingValue>
    
</MudLayout>

@code {
    bool _navdrawerOpen = false;

    bool _loggedIn = false;
    private string? identity = "hell nah";

    protected async override Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvide.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            identity = user.FindFirstValue(ClaimTypes.NameIdentifier);
            var temp = await client.GetFromJsonAsync<Account>($"https://localhost:44384/api/Account/GetAccountById/{identity}");
            if (temp is null)
            {
                Account obj = new()
                {
                        Id = Guid.Parse(identity),
                        AccountId = Guid.Parse(identity)
                };
                var load = JsonSerializer.Serialize(obj/* , SerializerOptions */);
                HttpContent content = new StringContent(load, Encoding.UTF8, "application/json");
                var result = await client.PostAsync("https://localhost:44384/api/Account", content).ConfigureAwait(false);
            }
            
        }

    }

    async void NavDrawerToggle()
    {
        _navdrawerOpen = !_navdrawerOpen;
    }
}